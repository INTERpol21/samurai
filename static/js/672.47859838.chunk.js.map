{"version":3,"file":"static/js/672.47859838.chunk.js","mappings":"kKACA,EAAgC,+BAAhC,EAAgF,gCAAhF,EAAuH,sBAAvH,EAAsJ,wBAAtJ,EAAkM,mCAAlM,EAA+O,yB,mBCe/O,EAZmB,SAACA,GAGhB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAa,IAAMA,EAAnC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,QAGrC,ECHD,EAPgB,SAACN,GACb,OACI,cAAGG,UAAWC,EAAd,SAA8BJ,EAAMO,SAE3C,E,UCmFD,EAnFgB,SAACP,GAGb,IAAIQ,EAAQR,EAAMS,YAGdC,EAAkBF,EAAMG,QACvBC,KAAI,SAACC,EAAQX,GAAT,OAAgB,SAAC,EAAD,CAAYI,KAAMO,EAAOP,MAAWJ,EAApD,IAELY,EAAmBN,EAAMO,SACxBH,KAAI,SAACL,EAASL,GAAV,OAAiB,SAAC,EAAD,CAASK,QAASA,EAAQA,SAAcL,EAAzD,IAiBHc,EAAiB,SAAChB,GAMpB,OACI,SAAC,KAAD,CACIiB,cAAe,CACXC,eAAgB,IAEpBC,SAAU,SAACC,EAAD,GAA0B,IAAhBC,EAAe,EAAfA,WATR,SAACD,GACjBpB,EAAMsB,YAAYF,EACrB,CAQWG,CAAcH,EAAOF,gBACrBG,EAAU,CAACD,OAAQ,IACtB,EAPL,SAUK,kBACG,UAAC,KAAD,YACI,0BACI,SAAC,KAAD,CACId,KAAM,iBACNkB,GAAI,WACJC,YAAa,iFAIrB,mBAAQC,KAAM,SAAd,oBAVP,GAeZ,EAGD,OACI,iBAAKvB,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKM,KAEL,iBAAKP,UAAWC,EAAhB,WACI,yBAAMU,KACN,0BACI,SAACE,EAAD,CAAgBM,YAAatB,EAAMsB,qBAWtD,E,oBCPD,GAAeK,E,QAAAA,KACXC,EAAAA,EAAAA,KAhCkB,SAACpB,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAG1B,IAEwB,SAACoB,GACtB,MAAO,CACHP,YAAa,SAACQ,GAEVD,GAASE,EAAAA,EAAAA,IAAmBD,GAC/B,EACDE,qBAAsB,SAACC,GACnBJ,GAASK,EAAAA,EAAAA,IAA4BD,GACxC,EAGR,IAeGE,EAAAA,EAFJ,CAGEC,E","sources":["webpack://samurai/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialog__inner\":\"Dialogs_dialog__inner__S2nbr\",\"dialogs__items\":\"Dialogs_dialogs__items__8NTPw\",\"item\":\"Dialogs_item__EArIA\",\"active\":\"Dialogs_active__jM7ef\",\"dialogs__messages\":\"Dialogs_dialogs__messages__DRu0D\",\"message\":\"Dialogs_message__1e7DK\"};","import style from \"../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n\r\n\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={style.item + \" \" + style.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;\r\n","import style from \"../Dialogs.module.css\"\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <p className={style.message}>{props.message}</p>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;\r\n","import style from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Field, Form, Formik} from \"formik\";\r\n\r\n\r\n//либо вытягивать из props с помошью JS {state}\r\nconst Dialogs = (props) => {\r\n\r\n\r\n    let state = props.dialogsPage;\r\n\r\n\r\n    let dialogsElements = state.dialogs\r\n        .map((dialog, id) => <DialogItem name={dialog.name} key={id}/>)\r\n\r\n    let messagesElements = state.messages\r\n        .map((message, id) => <Message message={message.message} key={id}/>)\r\n\r\n    // let newMessageBody = state.newMessageBody\r\n    //\r\n    // //STATE\r\n    // let onSendMessageClick = () => {\r\n    //\r\n    //     props.sandMessage()\r\n    // }\r\n    //\r\n    // let onNewMessageChange = (event) => {\r\n    //     //target это и есть input\r\n    //     let body = event.target.value;\r\n    //     props.updateNewMessageBody(body)\r\n    //\r\n    // }\r\n\r\n    const AddMassageForm = (props) => {\r\n\r\n        let addNewMessage = (values) => {\r\n            props.sendMessage(values);\r\n        }\r\n\r\n        return (\r\n            <Formik\r\n                initialValues={{\r\n                    newMessageBody: \"\"\r\n                }}\r\n                onSubmit={(values, {resetForm}) => {\r\n                    addNewMessage(values.newMessageBody);\r\n                    resetForm({values: ''});\r\n                }\r\n                }\r\n            >\r\n                {() => (\r\n                    <Form>\r\n                        <div>\r\n                            <Field\r\n                                name={'newMessageBody'}\r\n                                as={'textarea'}\r\n                                placeholder={'Введите текст'}\r\n                            />\r\n                        </div>\r\n\r\n                        <button type={'submit'}>Send</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.dialog__inner}>\r\n            <div className={style.dialogs__items}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={style.dialogs__messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMassageForm sendMessage={props.sendMessage}/>\r\n                    {/*<form>*/}\r\n                    {/*    <input type=\"text\" value={newMessageBody} placeholder={\"Напиши текст\"}*/}\r\n                    {/*           onChange={onNewMessageChange}/>*/}\r\n                    {/*    <button type={\"button\"} onClick={onSendMessageClick}>Message</button>*/}\r\n                    {/*</form>*/}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n","import {sendMessageCreator, updateNewMessageBodyCreator} from \"../../redux/Reducer/DialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n//либо вытягивать из props с помошью JS {state}\r\n// const DialogsContainer = () => {\r\n//\r\n//\r\n//     // let state = props.store.getState().dialogsPage;\r\n//     //\r\n//     // //STATE\r\n//     // let onSendMessageClick = () => {\r\n//     //     props.store.dispatch(sendMessageCreator())\r\n//     // }\r\n//     //\r\n//     // let onNewMessageChange = (body) => {\r\n//     //     //target это и есть input\r\n//     //     props.store.dispatch(updateNewMessageBodyCreator(body))\r\n//     // }\r\n//\r\n// //удаляем пропсы так как в пропсыыбольше ничего не приходит используем StoreContext\r\n//     return (\r\n//         <StoreContext.Consumer>{\r\n//             (store) => {\r\n//\r\n//                 //STATE\r\n//                 let onSendMessageClick = () => {\r\n//                     store.dispatch(sendMessageCreator())\r\n//                 }\r\n//\r\n//                 let onNewMessageChange = (body) => {\r\n//                     //target это и есть input\r\n//                     store.dispatch(updateNewMessageBodyCreator(body))\r\n//                 }\r\n//                 return (\r\n//                     //Оставляем пропсы только в чистом компоненте\r\n//                     <Dialogs updateNewMessageBody={onNewMessageChange}\r\n//                              sandMessage={onSendMessageClick}\r\n//                              dialogsPage={store.getState().dialogsPage}/>)\r\n//             }\r\n//         }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n//настраиваем свойство, которое мы возьмем из state.dialogsPage\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n\r\n    }\r\n}\r\n//Колбеки которые будем отправлять в призентационую компоненту\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageText) => {\r\n\r\n            dispatch(sendMessageCreator(newMessageText))\r\n        },\r\n        updateNewMessageBody: (body) => {\r\n            dispatch(updateNewMessageBodyCreator(body))\r\n        },\r\n\r\n    }\r\n}\r\n//Конвейр вызовов с низу вверх\r\n// compose(\r\n//     connect(mapStateToProps, mapDispatchToProps),\r\n//     withAuthRedirect\r\n// )(Dialogs)\r\n//\r\n// //HOC\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n//\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n"],"names":["props","path","id","className","style","to","name","message","state","dialogsPage","dialogsElements","dialogs","map","dialog","messagesElements","messages","AddMassageForm","initialValues","newMessageBody","onSubmit","values","resetForm","sendMessage","addNewMessage","as","placeholder","type","compose","connect","dispatch","newMessageText","sendMessageCreator","updateNewMessageBody","body","updateNewMessageBodyCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}